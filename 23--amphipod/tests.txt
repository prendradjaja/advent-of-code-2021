>>> from s import generate_moves, parse_input, show, apply_move
>>> def generate_moves_from(start, g, state):
...    return ''.join(sorted(e for s, e in generate_moves(g, state) if s == start))

Can move out of room
>>> g, state = parse_input('''
... #############
... #...........#
... ###B#C#B#D###
...   #A#D#C#A#
...   #########
... ''')
>>> generate_moves_from('b', g, state)
'0123456'

Can be blocked in the hallway
>>> g, state = parse_input('''
... #############
... #.....B.....#
... ###B#C#.#D###
...   #A#D#C#A#
...   #########
... ''')
>>> generate_moves_from('b', g, state)
'012'

Can be blocked from leaving a room
>>> g, state = parse_input('''
... #############
... #.....B.....#
... ###B#C#.#D###
...   #A#D#C#A#
...   #########
... ''')
>>> generate_moves_from('e', g, state)
''

From hallway, will not move to other squares in hallway
>>> g, state = parse_input('''
... #############
... #.....B.....#
... ###B#C#C#D###
...   #A#D#.#A#
...   #########
... ''')
>>> generate_moves_from('3', g, state)
''

Moving into a room: Goes to deepest square in the correct room
>>> g, state = parse_input('''
... #############
... #.....B.....#
... ###B#.#.#D###
...   #A#.#.#A#
...   #########
... ''')
>>> generate_moves_from('3', g, state)
'f'

Moving into a room: Won't enter if someone else (wrong type) is already thtere
>>> g, state = parse_input('''
... #############
... #.....B.....#
... ###B#.#.#D###
...   #A#A#.#A#
...   #########
... ''')
>>> generate_moves_from('3', g, state)
''

Moving into a room: Will enter if someone else (right type) is already hetre
>>> g, state = parse_input('''
... #############
... #.....B.....#
... ###B#.#.#D###
...   #A#B#.#A#
...   #########
... ''')
>>> generate_moves_from('3', g, state)
'b'

Won't leave home if in deepest position
>>> g, state = parse_input('''
... #############
... #...........#
... ###.#C#B#D###
...   #A#D#C#A#
...   #########
... ''')
>>> generate_moves_from('e', g, state)
''

Won't leave home if already in there with a friend
>>> g, state = parse_input('''
... #############
... #...........#
... ###A#C#B#D###
...   #A#D#C#A#
...   #########
... ''')
>>> generate_moves_from('a', g, state)
''

The full example --------------------------------------------------------------

>>> apply_move.total
0

>>> g, state = parse_input('''
... #############
... #...........#
... ###B#C#B#D###
...   #A#D#C#A#
...   #########
... ''')

>>> move = ('c', '2')
>>> move in generate_moves(g, state)
True
>>> apply_move(g, state, move)
40
>>> show(g, state, with_border=True)
#############
#...B.......#
###B#C#.#D###
  #A#D#C#A#
  #########

TODO Move directly from one room to another
>>> move = ('b', '3')
>>> move in generate_moves(g, state)
True
>>> apply_move(g, state, move)
200
>>> move = ('3', 'c')
>>> move in generate_moves(g, state)
True
>>> apply_move(g, state, move)
200
>>> show(g, state, with_border=True)
#############
#...B.......#
###B#.#C#D###
  #A#D#C#A#
  #########

>>> move = ('f', '3')
>>> move in generate_moves(g, state)
True
>>> apply_move(g, state, move)
3000
>>> move = ('2', 'f')
>>> move in generate_moves(g, state)
True
>>> apply_move(g, state, move)
30
>>> show(g, state, with_border=True)
#############
#.....D.....#
###B#.#C#D###
  #A#B#C#A#
  #########

TODO Move directly from one room to another
>>> move = ('a', '2')
>>> move in generate_moves(g, state)
True
>>> apply_move(g, state, move)
20
>>> move = ('2', 'b')
>>> move in generate_moves(g, state)
True
>>> apply_move(g, state, move)
20
>>> show(g, state, with_border=True)
#############
#.....D.....#
###.#B#C#D###
  #A#B#C#A#
  #########

>>> move = ('d', '4')
>>> move in generate_moves(g, state)
True
>>> apply_move(g, state, move)
2000
>>> move = ('h', '5')
>>> move in generate_moves(g, state)
True
>>> apply_move(g, state, move)
3
>>> show(g, state, with_border=True)
#############
#.....D.D.A.#
###.#B#C#.###
  #A#B#C#.#
  #########

>>> move = ('4', 'h')
>>> move in generate_moves(g, state)
True
>>> apply_move(g, state, move)
3000
>>> move = ('3', 'd')
>>> move in generate_moves(g, state)
True
>>> apply_move(g, state, move)
4000
>>> show(g, state, with_border=True)
#############
#.........A.#
###.#B#C#D###
  #A#B#C#D#
  #########

>>> move = ('5', 'a')
>>> move in generate_moves(g, state)
True
>>> apply_move(g, state, move)
8
>>> show(g, state, with_border=True)
#############
#...........#
###A#B#C#D###
  #A#B#C#D#
  #########

>>> apply_move.total
12521
